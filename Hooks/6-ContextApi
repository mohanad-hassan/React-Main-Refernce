// Context lets the parent component make some information available to any component in the tree below it—no matter how deep—without passing it explicitly through prop .
//Context lets a parent component provide data to the entire tree below it. 
// import { createContext } from 'react';
//Note :
when any state of context rernder , all the compnents that used this context will be rernder , so be careful .
see useContext in react docs .
//

export const LevelContext = createContext(iniitial value); what we change with return 
**********************************************
import { useContext } from 'react';
import { LevelContext } from './LevelContext.js';


//the only way to override some context coming from above is to wrap children into a context provider with a different value.

//Syntax 
import { createContext } from 'react';
import { useContext } from 'react';
import { useState } from 'react';
import NavLinks from './NavLinks';

export const NavbarContext = createContext();
// returns two components
// Provider - wrap return in Parent Component
// Consumer - replaced by useContext() hook

// custom hook

export const useAppContext = () => useContext(NavbarContext);

const Navbar = () => {
  const [user, setUser] = useState({ name: 'bob' });
  const logout = () => {
    setUser(null);
  };
  return (
    <NavbarContext.Provider value={{ user, logout }}>
      <nav className='navbar'>
        <h5>CONTEXT API</h5>
        <NavLinks />
      </nav>
    </NavbarContext.Provider>
  );
};
export default Navbar;

Important 
//Overriding context for a part of the tree 
You can override the context for a part of the tree by wrapping that part in a provider with a different value.

//Here, the context value is a JavaScript object with two properties, one of which is a function. Whenever MyApp re-renders (for example, on a route update), this will be a different object pointing at a different function, so React will also have to re-render all components deep in the tree that call useContext(AuthContext).

In smaller apps, this is not a problem. However, there is no need to re-render them if the underlying data, like currentUser, has not changed. To help React take advantage of that fact, you may wrap the login function with useCallback and wrap the object creation into useMemo. This is a performance optimization:
